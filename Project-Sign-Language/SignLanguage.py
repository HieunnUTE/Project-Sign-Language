# -*- coding: utf-8 -*-
"""AI_FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15cAeI16kXTMj769IIYVApXq02th8CVzW
"""

#ket noi voi drive
from google.colab import drive
drive.mount('/content/drive')

# Khai báo và sử dụng các thư viện sau
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import os
import numpy as np
import tensorflow as tf
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.optimizers import SGD, RMSprop
from keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.utils import validation 
from sklearn import preprocessing
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import load_model
from tensorflow.keras.utils import load_img, img_to_array
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Tạo ra class ImageDataGenerator để chỉnh sửa ảnh 
train_datagen=ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
# Tạo bộ dữ liệu training set
training_set=train_datagen.flow_from_directory('/content/drive/MyDrive/Data_Hand/Train',target_size=(64,64), batch_size=64, class_mode='categorical')
# Tạo bộ dữ liệu validation
test=train_datagen.flow_from_directory('/content/drive/MyDrive/Data_Hand/Test',target_size=(64,64), batch_size=64, class_mode='categorical')

# Các nhãn có trong bộ dữ liệu training set
test.class_indices = {'A': 0,'B': 1,'C': 2,'D': 3,'E': 4,'F': 5,'G': 6,'H': 7,'I': 8,'J': 9,'K': 10,'L': 11,'M': 12,'N': 13,'O': 14,'P': 15,
           'Q': 16,'R': 17,'T': 18,'U': 19,'V': 20,'W': 21,'X': 22,'Y': 23,'Z': 24}

model = Sequential()
model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer='he_uniform', padding='same', 
                 input_shape=(64,64,3)))
model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer='he_uniform', padding='same'))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(64,(3,3),activation='relu',kernel_initializer='he_uniform', padding='same'))
model.add(Conv2D(64,(3,3),activation='relu',kernel_initializer='he_uniform', padding='same'))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(128,(3,3),activation='relu',kernel_initializer='he_uniform', padding='same'))
model.add(Conv2D(128,(3,3),activation='relu',kernel_initializer='he_uniform', padding='same'))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
model.add(Dense(25, activation='softmax'))
model.summary()

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
history=model.fit(training_set,epochs=50,batch_size=64,verbose=1, validation_data=test)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train','validation'])
plt.show

model.save("AI_CUOIKI.h5")

print(test.class_indices)

new_model = load_model('AI_CUOIKI.h5')
img = load_img("/content/drive/MyDrive/Data_HandLang/Test/F/okay_254.jpg",
               target_size=(64,64))
plt.imshow(img)
img = img_to_array(img)
img = img.reshape(1,64,64,3)  
img = img.astype('float32')
img /= 255
prediction = model.predict(img).argmax()
print(prediction)
y_pred = model.predict(img)
a = y_pred.max()
a = a*100
print(a, '%')